import { getCurrentLanguage, t } from "./i18n.js";

document.addEventListener("DOMContentLoaded", function () {
  const theoryToolSection = document.getElementById("theory-tool");
  
  // Listen for language changes
  document.addEventListener('languageChanged', () => {
    loadTheoryContent();
  });
  
  loadTheoryContent();
});

function loadTheoryContent() {
  const theoryToolSection = document.getElementById("theory-tool");
  const currentLang = getCurrentLanguage();

  if (theoryToolSection) {
    const prefixTableTitle = currentLang === 'vi' ? 'Bảng thông tin Prefix-length' : 'Prefix-length Information Table';
    const ipTableTitle = currentLang === 'vi' ? 'Bảng phân chia địa chỉ IP' : 'IP Address Division Table';
    
    theoryToolSection.innerHTML = `
    <div class="row">
      <div class="col-12">
        <div class="card shadow-sm border-0">
          <div class="card-body">
            <section id="tables" class="mt-4">
              <!-- Bảng thông tin Prefix-length -->
              <div class="table-responsive mb-4">
                <h3>${prefixTableTitle}</h3>
                <div id="prefix-grid-container" class="prefix-grid">
                  <!-- Grid content will be generated by JavaScript -->
                </div>
              </div>
              <!-- Bảng phân chia địa chỉ IP -->
              <div class="table-responsive mb-4">
                <h3>${ipTableTitle}</h3>
                <div id="ip-grid-container" class="ip-grid">
                  <!-- IP grid content will be generated by JavaScript -->
                </div>
              </div>
            </section>
          </div>
        </div>
      </div>
    </div>
    `;

    const prefixData = {
      headers: ["Prefix-length", "/24", "/25", "/26", "/27", "/28", "/29", "/30"],
      rows: currentLang === 'vi' ? [
        { label: "Số lượng IP", values: ["256 - 2", "128 - 2", "64 - 2", "32 - 2", "16 - 2", "8 - 2", "4 - 2"] },
        { label: "Số mạng con", values: ["1", "2", "4", "8", "16", "32", "64"] },
        { label: "Số host", values: ["127 > 254", "63 > 126", "31 > 62", "15 > 30", "7 > 14", "3 > 6", "1 > 2"], class: "text-danger" },
        { label: "Subnet mask", values: ["255.255.255.0", "255.255.255.128", "255.255.255.192", "255.255.255.224", "255.255.255.240", "255.255.255.248", "255.255.255.252"], class: "text-primary" },
        { label: "Wildcard mask", values: ["0.0.0.255", "0.0.0.127", "0.0.0.63", "0.0.0.31", "0.0.0.15", "0.0.0.7", "0.0.0.3"], class: "text-success" },
      ] : [
        { label: "Number of IP", values: ["256 - 2", "128 - 2", "64 - 2", "32 - 2", "16 - 2", "8 - 2", "4 - 2"] },
        { label: "Number of Subnet", values: ["1", "2", "4", "8", "16", "32", "64"] },
        { label: "Number of Host", values: ["127 > 254", "63 > 126", "31 > 62", "15 > 30", "7 > 14", "3 > 6", "1 > 2"], class: "text-danger" },
        { label: "Subnet mask", values: ["255.255.255.0", "255.255.255.128", "255.255.255.192", "255.255.255.224", "255.255.255.240", "255.255.255.248", "255.255.255.252"], class: "text-primary" },
        { label: "Wildcard mask", values: ["0.0.0.255", "0.0.0.127", "0.0.0.63", "0.0.0.31", "0.0.0.15", "0.0.0.7", "0.0.0.3"], class: "text-success" },
      ],
    };

    const gridContainer = document.getElementById("prefix-grid-container");
    if (gridContainer) {
      let gridHTML = "";

      // Generate headers
      prefixData.headers.forEach((header) => {
        gridHTML += `<div class="prefix-grid-header">${header}</div>`;
      });

      // Generate rows
      prefixData.rows.forEach((row) => {
        gridHTML += `<div class="prefix-grid-cell"><strong>${row.label}</strong></div>`;
        row.values.forEach((value) => {
          gridHTML += `<div class="prefix-grid-cell ${row.class || ""}">${value}</div>`;
        });
      });

      gridContainer.innerHTML = gridHTML;
    }

    const ipGridContainer = document.getElementById("ip-grid-container");
    if (ipGridContainer) {
      const totalRows = 64;
      let ipGridHTML = [...Array(7)].map((_, i) => `<div class="ip-grid-header">${Math.pow(2, 8 - i)}</div>`).join("");

      const columns = [
        { prefix: 24, subnets: 1, step: 256 },
        { prefix: 25, subnets: 2, step: 128 },
        { prefix: 26, subnets: 4, step: 64 },
        { prefix: 27, subnets: 8, step: 32 },
        { prefix: 28, subnets: 16, step: 16 },
        { prefix: 29, subnets: 32, step: 8 },
        { prefix: 30, subnets: 64, step: 4 },
      ];

      const generateIpGridColumn = (prefix, subnets, step) => {
        let columnHTML = '<div class="ip-grid-col">';
        // Generate IP cells
        for (let i = 0; i < subnets; i++) {
          columnHTML += `<div class="ip-grid-cell">192.168.1.${i * step}/${prefix}</div>`;
        }
        // Generate empty cells
        const emptyCells = totalRows - subnets;
        for (let i = 0; i < emptyCells; i++) {
          columnHTML += `<div class="ip-grid-cell bg-secondary">&nbsp;</div>`;
        }
        columnHTML += "</div>";
        return columnHTML;
      };

      columns.forEach((col) => {
        ipGridHTML += generateIpGridColumn(col.prefix, col.subnets, col.step);
      });

      ipGridContainer.innerHTML = ipGridHTML;
    }
  }
}
